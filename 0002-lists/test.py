import unittest
import main

class TestModule2(unittest.TestCase):
    def test_task_1(self):
        self.assertEqual([78],
                         main.task_1([78, -27, -71, 64, 31, -65, 31, -15, 27, -12, 20, -17, 94, 80, -27, 65, 54], 8))
        self.assertEqual([], main.task_1(
            [-24, -40, -71, -25, 4, 67, 5, 8, 77, 55, 6, 32, 46, 6, -61, -63, -77, 56, -80, -93, -44, -93, 82], 0))
        self.assertEqual([59, 49],
                         main.task_1([48, 25, -52, -17, -47, 36, 59, -73, 58, 49, 70, 75, -27, -26, -94, -50], 9))
        self.assertEqual([-1, 61, -21, 61], main.task_1(
            [-49, 46, -67, 33, -1, 61, -21, 61, -84, 98, -98, -78, -88, 66, -87, 35, 47, 36, -99, -56, -75, -28, 24],
            1))
        self.assertEqual([], main.task_1(
            [-71, -1, -18, -41, -60, 52, -68, -99, -95, 84, 25, -58, 83, -47, -33, -24, -3, 21, -77, 41, -66, 92, -44,
             -88], 0))
        self.assertEqual([], main.task_1(
            [56, -30, 52, -7, -34, 94, 34, 89, 51, -61, 25, 93, 3, 26, -70, 84, 8, 87, -70, 87, -77], 0))
        self.assertEqual([-42, 32],
                         main.task_1([-26, 56, -55, 43, -87, -15, 8, -42, -40, -15, 87, 46, 97, -98, 100, 32, -50], 2))
        self.assertEqual([-75], main.task_1([-34, -99, -33, 29, 76, 32, -75, 89, 73, 22, -87, 26, -90, -24], 5))
        self.assertEqual([20], main.task_1(
            [87, -83, 66, -25, 16, 34, 64, -87, 6, 48, 71, -19, -66, 78, 52, -40, -72, -10, -89, 56, 72, 20], 0))
        self.assertEqual([], main.task_1([11, -66, 73, -91, 61, -43, -60, -1, -36, 88, -66], 9))
        self.assertEqual([], main.task_1([-43, -53, 70, 71, -4, 53, -24, 68, -6, 55, -11], 7))
        self.assertEqual([81], main.task_1([-49, 81, -85, -98, -23, 67, 72, -15, -97, 63, -34], 1))
        self.assertEqual([92], main.task_1(
            [90, 89, 26, 3, -13, 83, 4, 6, -15, -54, 3, -63, 41, -96, 92, 21, 97, 83, 96, 68, -79], 2))
        self.assertEqual([], main.task_1([53, 80, 43, -71, 97, 34, -66, -43, -42, -49, 76, -26, 3, 29, -1, 68], 5))
        self.assertEqual([], main.task_1([28, -8, -59, 5, 84, -36, -20, -2, -75, -86], 10))
        self.assertEqual([86, 66, 46], main.task_1(
            [-53, 5, 37, -24, -12, -48, 34, -2, 86, 64, 66, 90, 95, -53, 32, -98, -21, 46, -34, 5, 73, -90, -79, -69],
            6))
        self.assertEqual([], main.task_1([64, 51, -82, 67, 11, -24, -39, 97, -57, 92, -54], 6))
        self.assertEqual([], main.task_1([66, -72, 99, 37, 82, 89, 33, -5, -87, 69, -24], 0))
        self.assertEqual([],
                         main.task_1([60, 100, 20, 82, -91, 47, 48, 78, -16, 33, -78, -33, -66, -42, -13, -75, -7, 34],
                                     -1))
        self.assertEqual([88], main.task_1(
            [-83, -13, 54, -59, 59, -85, 10, -62, 88, 0, 67, -20, -29, 40, -89, 22, 66, -92, 73, 45], 8))
        self.assertEqual([77, -77], main.task_1(
            [6, -96, 41, 14, 80, 39, -99, -70, 68, -70, -34, -49, 85, 18, 77, 90, 22, -53, 48, -77, 63], 7))
        self.assertEqual([], main.task_1(
            [31, -98, -45, -13, -35, 6, 23, 70, 19, -77, 15, 4, -69, 26, -37, 73, -66, 73, -37, -13, 15, 72, -54, 74,
             23], 10))
        self.assertEqual([69, -89], main.task_1([43, -55, 69, 53, -22, 37, 50, -89, 83, 13, 7, -72, -67], 9))
        self.assertEqual([], main.task_1(
            [0, 10, -31, 14, 12, -4, 90, 50, 32, -49, 52, -17, 3, 95, -43, -83, 68, 53, -58, 61, -5, -70, -20, 53], 6))
        self.assertEqual([-57, 87], main.task_1([-94, -79, -4, -57, 60, 41, -64, -72, 55, -19, 87], 7))
        self.assertEqual([], main.task_1([-61, -13, -94, -11, -23, -81, -83, -62, 11, 96, -48], 7))
        self.assertEqual([14, -4, -74, 44], main.task_1([14, 89, -4, -56, -74, -40, 44, -69, -53, -58, -7, -2], 4))
        self.assertEqual([], main.task_1([84, 69, 4, -77, 77, -13, -63, -71, -67, -14], 8))
        self.assertEqual([], main.task_1([-17, -53, 24, -79, 23, -83, 7, 55, 84, 0, -54, 62], 1))
        self.assertEqual([24], main.task_1([-25, -52, 15, -33, 39, 7, -75, -89, 16, -26, -100, 58, -60, 24], 4))